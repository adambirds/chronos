{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Chronos","text":"<p>Chronos is a Python library for advanced task timing and performance monitoring. With features like distributed timing, batch timing, real-time visualization, and debugging-friendly timers, Chronos provides powerful tools for developers.</p>"},{"location":"#quickstart","title":"Quickstart","text":"<p>Install Chronos using pip:</p> <pre><code>pip install chronos-context-timer\n</code></pre> <p>Start timing tasks with the basic <code>ChronosTimer</code>:</p> <pre><code>from chronos import ChronosTimer\n\nwith ChronosTimer(\"My Task\") as timer:\n    # Simulate work\n    import time\n    time.sleep(1)\n\nprint(f\"Elapsed time: {timer.get_elapsed('seconds')} seconds\")\n</code></pre> <p>Explore the documentation to learn more about advanced features.</p>"},{"location":"batch_timer/","title":"BatchChronosTimer","text":"<p>The <code>BatchChronosTimer</code> helps time multiple tasks and compute aggregate statistics like average, median, and total times.</p>"},{"location":"batch_timer/#example","title":"Example","text":"<pre><code>from chronos import BatchChronosTimer\n\ndef example_task():\n    import time\n    time.sleep(0.5)\n\nbatch_timer = BatchChronosTimer(\"Batch Example\")\nfor _ in range(3):\n    batch_timer.time_task(example_task)\n\nstats = batch_timer.get_statistics(\"seconds\")\nprint(f\"Average time: {stats['average_time']} seconds\")\nprint(f\"Total time: {stats['total_time']} seconds\")\n</code></pre>"},{"location":"batch_timer/#methods","title":"Methods","text":"<ul> <li>**<code>time_task(task: callable, \\*args, **kwargs)</code>**: Time a single task and store the elapsed time.</li> <li><code>get_statistics(unit: str = \"seconds\")</code>: Return aggregate statistics for the batch.</li> </ul>"},{"location":"debug_timer/","title":"DebuggingChronosTimer","text":"<p>The <code>DebuggingChronosTimer</code> allows pausing and resuming timers during debugging sessions.</p>"},{"location":"debug_timer/#example","title":"Example","text":"<pre><code>from chronos import DebuggingChronosTimer\n\nwith DebuggingChronosTimer(\"Debug Task\") as timer:\n    input(\"Press Ctrl+Z to pause, and again to resume. Press Enter to finish.\")\n</code></pre>"},{"location":"distributed_timer/","title":"DistributedChronosTimer","text":"<p>The <code>DistributedChronosTimer</code> aggregates timing data from multiple sources. It is ideal for distributed systems where timing data from multiple machines or processes needs to be combined.</p>"},{"location":"distributed_timer/#example","title":"Example","text":"<pre><code>from chronos import DistributedChronosTimer\n\nwith DistributedChronosTimer(\"Distributed Task\") as timer:\n    import time\n    time.sleep(1)\n\n# Add external timings\ntimer.add_timing(0.5)\ntimer.add_timing(1.5)\n\nprint(f\"Total elapsed time: {timer.get_total_time('seconds')} seconds\")\n</code></pre>"},{"location":"distributed_timer/#methods","title":"Methods","text":"<ul> <li><code>add_timing(elapsed_time: float)</code>: Add external timing data.</li> <li><code>get_total_time(unit: str = \"seconds\")</code>: Get the total elapsed time (local + external).</li> </ul>"},{"location":"timer/","title":"ChronosTimer","text":"<p><code>ChronosTimer</code> provides the core functionality for timing tasks with features like:</p> <ul> <li>Unit conversion (e.g., seconds, minutes, milliseconds).</li> <li>Threshold warnings.</li> <li>Logging to a file.</li> <li>Real-time progress reporting.</li> </ul>"},{"location":"timer/#example","title":"Example","text":"<pre><code>from chronos import ChronosTimer\n\nwith ChronosTimer(\"Example Task\") as timer:\n    import time\n    time.sleep(1)\n\nprint(f\"Elapsed time: {timer.get_elapsed('seconds')} seconds\")\n</code></pre>"},{"location":"timer/#parameters","title":"Parameters","text":"Parameter Type Default Description <code>name</code> <code>str</code> <code>None</code> Name of the task being timed. <code>log_file</code> <code>str</code> <code>None</code> Path to log file for saving timing data. <code>threshold</code> <code>float</code> <code>None</code> Warn if the elapsed time exceeds this threshold. <code>interval</code> <code>float</code> <code>None</code> Interval for real-time progress reporting (seconds). <code>default_unit</code> <code>str</code> <code>seconds</code> Default time unit for output."},{"location":"visual_timer/","title":"ChronosTimerWithVisualization","text":"<p>The <code>ChronosTimerWithVisualization</code> provides real-time ASCII progress bars for visual feedback during task execution.</p>"},{"location":"visual_timer/#example","title":"Example","text":"<pre><code>from chronos import ChronosTimerWithVisualization\n\nwith ChronosTimerWithVisualization(\"Visualized Task\", interval=0.2, threshold=5):\n    import time\n    time.sleep(5)\n</code></pre>"}]}